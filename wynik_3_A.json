MongoDB shell version v4.4.4
connecting to: mongodb://127.0.0.1:27017/atd?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("90e96fe2-9f0a-4550-8d17-ff0a8cd57568") }
MongoDB server version: 4.4.4
{
	"_batch" : [
		{
			"_id" : null,
			"uniqueOccupations" : [
				"Social Worker",
				"Systems Administrator IV",
				"Paralegal",
				"Legal Assistant",
				"Marketing Manager",
				"Office Assistant II",
				"Associate Professor",
				"Biostatistician II",
				"Mechanical Systems Engineer",
				"Engineer III",
				"Automation Specialist IV",
				"Speech Pathologist",
				"Accountant I",
				"Health Coach II",
				"Software Test Engineer III",
				"Senior Financial Analyst",
				"Statistician III",
				"Chief Design Engineer",
				"Senior Editor",
				"Quality Control Specialist",
				"Structural Engineer",
				"Administrative Assistant I",
				"Environmental Tech",
				"Developer I",
				"Data Coordiator",
				"Programmer Analyst II",
				"Account Coordinator",
				"Computer Systems Analyst III",
				"Biostatistician III",
				"Systems Administrator II",
				"Chemical Engineer",
				"Biostatistician IV",
				"Editor",
				"Computer Systems Analyst I",
				"Account Representative III",
				"Database Administrator II",
				"VP Marketing",
				"VP Product Management",
				"Analyst Programmer",
				"Assistant Professor",
				"Research Nurse",
				"Database Administrator I",
				"Automation Specialist I",
				"Developer IV",
				"Engineer II",
				"Research Assistant IV",
				"Staff Accountant IV",
				"VP Quality Control",
				"Clinical Specialist",
				"Analog Circuit Design manager",
				"Web Designer IV",
				"Human Resources Assistant II",
				"Media Manager I",
				"Health Coach III",
				"Software Test Engineer II",
				"Help Desk Technician",
				"Geological Engineer",
				"Software Consultant",
				"Media Manager III",
				"Physical Therapy Assistant",
				"Automation Specialist II",
				"Internal Auditor",
				"Dental Hygienist",
				"Budget/Accounting Analyst II",
				"Research Assistant II",
				"Computer Systems Analyst IV",
				"Technical Writer",
				"Developer II",
				"Health Coach IV",
				"Sales Associate",
				"Administrative Assistant IV",
				"Statistician I",
				"Programmer II",
				"Systems Administrator III",
				"Executive Secretary",
				"VP Accounting",
				"Occupational Therapist",
				"Systems Administrator I",
				"Safety Technician III",
				"Director of Sales",
				"Engineer IV",
				"Tax Accountant",
				"Research Assistant III",
				"Accountant IV",
				"Human Resources Assistant I",
				"Junior Executive",
				"Software Test Engineer I",
				"Biostatistician I",
				"Programmer IV",
				"General Manager",
				"Media Manager II",
				"Statistician IV",
				"Assistant Media Planner",
				"Web Developer III",
				"Safety Technician IV",
				"Project Manager",
				"Database Administrator IV",
				"Office Assistant I",
				"Nuclear Power Engineer",
				"Nurse Practicioner",
				"Structural Analysis Engineer",
				"Accountant III",
				"Staff Accountant II",
				"Office Assistant IV",
				"Account Representative I",
				"Developer III",
				"Safety Technician II",
				"Pharmacist",
				"Accountant II",
				"Registered Nurse",
				"Health Coach I",
				"Software Test Engineer IV",
				"Human Resources Assistant IV",
				"Research Assistant I",
				"Quality Engineer",
				"Electrical Engineer",
				"Accounting Assistant II",
				"Professor",
				"Librarian",
				"Research Associate",
				"Senior Cost Accountant",
				"Recruiting Manager",
				"Programmer Analyst I",
				"Community Outreach Specialist",
				"Budget/Accounting Analyst IV",
				"Statistician II",
				"Senior Developer",
				"Graphic Designer",
				"Human Resources Assistant III",
				"Staff Scientist",
				"Product Engineer",
				"Civil Engineer",
				"Computer Systems Analyst II",
				"Environmental Specialist",
				"Staff Accountant III",
				"Database Administrator III",
				"Geologist I",
				"Help Desk Operator",
				"Operator",
				"Web Developer IV",
				"Budget/Accounting Analyst I",
				"Media Manager IV",
				"Accounting Assistant I",
				"Staff Accountant I",
				"Software Engineer I",
				"Design Engineer",
				"Teacher",
				"Actuary",
				"Accounting Assistant III",
				"Payment Adjustment Coordinator",
				"Software Engineer II",
				"Accounting Assistant IV",
				"Programmer III",
				"Web Designer II",
				"Office Assistant III",
				"Engineer I",
				"Food Chemist",
				"Human Resources Manager",
				"Account Representative II",
				"Safety Technician I",
				"Software Engineer III",
				"Administrative Assistant II",
				"Geologist II",
				"GIS Technical Architect",
				"Sales Representative",
				"Programmer Analyst III",
				"Senior Quality Engineer",
				"Desktop Support Technician",
				"Senior Sales Associate",
				"Financial Analyst",
				"Cost Accountant",
				"Programmer Analyst IV",
				"Assistant Manager",
				"Compensation Analyst",
				"Information Systems Manager",
				"Recruiter",
				"Account Executive",
				"Software Engineer IV",
				"Web Designer III",
				"Business Systems Development Analyst",
				"Geologist III",
				"Account Representative IV",
				"Web Developer II",
				"Automation Specialist III",
				"Administrative Officer",
				"Web Developer I",
				"Web Designer I",
				"Budget/Accounting Analyst III",
				"Marketing Assistant",
				"Nurse",
				"Programmer I",
				"Administrative Assistant III",
				"Geologist IV",
				"VP Sales",
				"Financial Advisor"
			]
		}
	],
	"_useReadCommands" : true,
	"_cursorid" : NumberLong(0),
	"_batchSize" : undefined,
	"_maxAwaitTimeMS" : undefined,
	"_txnNumber" : undefined,
	"_ns" : "atd.people",
	"_db" : atd,
	"_collName" : "people",
	"_cursorHandle" : {
		
	},
	"isClosed" : function() {
    if (this._useReadCommands) {
        return bsonWoCompare({_: this._cursorid}, {_: NumberLong(0)}) === 0;
    }
    return this._cursor.isClosed();
},
	"isExhausted" : function() {
    return this.isClosed() && this.objsLeftInBatch() === 0;
},
	"close" : function() {
    if (!this._useReadCommands) {
        this._cursor.close();
    } else if (bsonWoCompare({_: this._cursorid}, {_: NumberLong(0)}) !== 0) {
        var killCursorCmd = {
            killCursors: this._collName,
            cursors: [this._cursorid],
        };
        var cmdRes = this._db.runCommand(killCursorCmd);
        if (cmdRes.ok != 1) {
            throw _getErrorWithCode(cmdRes, "killCursors command failed: " + tojson(cmdRes));
        }

        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong(0);
    }
},
	"_updatePostBatchResumeToken" : function(cursorObj) {
    if (cursorObj.postBatchResumeToken) {
        this._postBatchResumeToken = cursorObj.postBatchResumeToken;
        if ((cursorObj.firstBatch || cursorObj.nextBatch).length === 0) {
            this._resumeToken = this._postBatchResumeToken;
        }
        this._isChangeStream = true;
    }
},
	"_runGetMoreCommand" : function() {
    // Construct the getMore command.
    var getMoreCmd = {getMore: this._cursorid, collection: this._collName};

    if (this._batchSize) {
        getMoreCmd["batchSize"] = this._batchSize;
    }

    // maxAwaitTimeMS is only supported when using read commands.
    if (this._maxAwaitTimeMS) {
        getMoreCmd.maxTimeMS = this._maxAwaitTimeMS;
    }

    if (this._txnNumber) {
        getMoreCmd.txnNumber = NumberLong(this._txnNumber);
        getMoreCmd.autocommit = false;
    }

    // Deliver the getMore command, and check for errors in the response.
    var cmdRes = this._db.runCommand(getMoreCmd);
    assert.commandWorked(cmdRes, () => "getMore command failed: " + tojson(cmdRes));

    if (this._ns !== cmdRes.cursor.ns) {
        throw Error("unexpected collection in getMore response: " + this._ns +
                    " != " + cmdRes.cursor.ns);
    }

    if (!cmdRes.cursor.id.compare(NumberLong("0"))) {
        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong("0");
    } else if (this._cursorid.compare(cmdRes.cursor.id)) {
        throw Error("unexpected cursor id: " + this._cursorid.toString() +
                    " != " + cmdRes.cursor.id.toString());
    }

    // If the command result represents a change stream cursor, update our postBatchResumeToken.
    this._updatePostBatchResumeToken(cmdRes.cursor);

    // Successfully retrieved the next batch.
    this._batch = cmdRes.cursor.nextBatch.reverse();
},
	"_hasNextUsingCommands" : function() {
    assert(this._useReadCommands);

    if (!this._batch.length) {
        if (!this._cursorid.compare(NumberLong("0"))) {
            return false;
        }

        this._runGetMoreCommand();
    }

    return this._batch.length > 0;
},
	"hasNext" : function() {
    if (this._useReadCommands) {
        return this._hasNextUsingCommands();
    }

    return this._batch.length || this._cursor.hasNext();
},
	"next" : function() {
    if (this._batch.length) {
        // Pop the next result off the batch.
        const nextDoc = this._batch.pop();
        if (this._isChangeStream) {
            // If this is the last result in the batch, the postBatchResumeToken becomes the current
            // resume token for the cursor. Otherwise, the resume token is the _id of 'nextDoc'.
            this._resumeToken = (this._batch.length ? nextDoc._id : this._postBatchResumeToken);
        }
        return nextDoc;
    } else if (this._useReadCommands) {
        // Have to call hasNext() here, as this is where we may issue a getMore in order to retrieve
        // the next batch of results.
        if (!this.hasNext())
            throw Error("error hasNext: false");
        return this._batch.pop();
    } else {
        if (!this._cursor.hasNext())
            throw Error("error hasNext: false");

        var ret = this._cursor.next();
        if (ret.$err)
            throw _getErrorWithCode(ret, "error: " + tojson(ret));
        return ret;
    }
},
	"objsLeftInBatch" : function() {
    if (this._useReadCommands) {
        return this._batch.length;
    } else if (this._batch.length) {
        return this._batch.length;
    } else {
        return this._cursor.objsLeftInBatch();
    }
},
	"getId" : function() {
    return this._cursorid;
},
	"getResumeToken" : function() {
    // Return the most recent recorded resume token, if such a token exists.
    return this._resumeToken;
},
	"help" : function() {
    // This is the same as the "Cursor Methods" section of DBQuery.help().
    print("\nCursor methods");
    print("\t.toArray() - iterates through docs and returns an array of the results");
    print("\t.forEach( func )");
    print("\t.map( func )");
    print("\t.hasNext()");
    print("\t.next()");
    print(
        "\t.objsLeftInBatch() - returns count of docs left in current batch (when exhausted, a new getMore will be issued)");
    print("\t.itcount() - iterates through documents and counts them");
    print(
        "\t.getResumeToken() - for a change stream cursor, obtains the most recent valid resume token, if it exists.");
    print("\t.pretty() - pretty print each document, possibly over multiple lines");
    print("\t.close()");
},
	"toArray" : function() {
    if (this._arr)
        return this._arr;

    var a = [];
    while (this.hasNext())
        a.push(this.next());
    this._arr = a;
    return a;
},
	"forEach" : function(func) {
    while (this.hasNext())
        func(this.next());
},
	"map" : function(func) {
    var a = [];
    while (this.hasNext())
        a.push(func(this.next()));
    return a;
},
	"itcount" : function() {
    var num = 0;

    // Track how many bytes we've used this cursor to iterate iterated.  This function can be called
    // with some very large cursors.  SpiderMonkey appears happy to allow these objects to
    // accumulate, so regular gc() avoids an overly large memory footprint.
    //
    // TODO: migrate this function into c++
    var bytesSinceGC = 0;

    while (this.hasNext()) {
        num++;
        var nextDoc = this.next();
        bytesSinceGC += Object.bsonsize(nextDoc);

        // Garbage collect every 10 MB.
        if (bytesSinceGC > (10 * 1024 * 1024)) {
            bytesSinceGC = 0;
            gc();
        }
    }
    return num;
},
	"shellPrint" : function() {
    try {
        var start = new Date().getTime();
        var n = 0;
        while (this.hasNext() && n < DBQuery.shellBatchSize) {
            var s = this._prettyShell ? tojson(this.next()) : tojson(this.next(), "", true);
            print(s);
            n++;
        }
        if (typeof _verboseShell !== 'undefined' && _verboseShell) {
            var time = new Date().getTime() - start;
            print("Fetched " + n + " record(s) in " + time + "ms");
        }
        if (this.hasNext()) {
            print("Type \"it\" for more");
            ___it___ = this;
        } else {
            ___it___ = null;
        }
    } catch (e) {
        print(e);
    }
},
	"pretty" : function() {
    this._prettyShell = true;
    return this;
}
}
